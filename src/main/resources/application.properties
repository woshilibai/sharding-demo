#   普通数据源配置
#spring.datasource.driverClassName=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://172.16.15.49:3306/db_shop?characterEncoding=UTF-8
#spring.datasource.username=root
#spring.datasource.password=123456

#   Sharding-JDBC的配置
#   全部数据源shop,product0,product1
spring.shardingsphere.datasource.names=shop,product0,product1
#   shop数据源
spring.shardingsphere.datasource.shop.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.shop.driverClassName=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.shop.url=jdbc:mysql://172.16.15.49:3306/db_shop?characterEncoding=UTF-8
spring.shardingsphere.datasource.shop.username=root
spring.shardingsphere.datasource.shop.password=123456
#   product0数据源
spring.shardingsphere.datasource.product0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.product0.driverClassName=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.product0.url=jdbc:mysql://172.16.15.49:3306/db_product_0?characterEncoding=UTF-8
spring.shardingsphere.datasource.product0.username=root
spring.shardingsphere.datasource.product0.password=123456
#   product1数据源
spring.shardingsphere.datasource.product1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.product1.driverClassName=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.product1.url=jdbc:mysql://172.16.15.49:3306/db_product_1?characterEncoding=UTF-8
spring.shardingsphere.datasource.product1.username=root
spring.shardingsphere.datasource.product1.password=123456

#   定义分片表的真实数据节点 db_product_0.t_product_base_0,db_product_0.t_product_base_1,db_product_1.t_product_base_0,db_product_1.t_product_base_1
spring.shardingsphere.sharding.tables.t_product_base.actual-data-nodes=product$->{0..1}.t_product_base_$->{0..1}
spring.shardingsphere.sharding.tables.t_product_detail.actual-data-nodes=product$->{0..1}.t_product_detail_$->{0..1}

#   分库策略
#   分片键
spring.shardingsphere.sharding.tables.t_product_base.database-strategy.inline.sharding-column=shop_id
#   分片算法
spring.shardingsphere.sharding.tables.t_product_base.database-strategy.inline.algorithm-expression=product$->{shop_id%2}
spring.shardingsphere.sharding.tables.t_product_detail.database-strategy.inline.sharding-column=shop_id
spring.shardingsphere.sharding.tables.t_product_detail.database-strategy.inline.algorithm-expression=product$->{shop_id%2}
#   默认数据源，未分片的表默认执行库
spring.shardingsphere.sharding.default-data-source-name=shop

#   分表策略
spring.shardingsphere.sharding.tables.t_product_base.table-strategy.inline.sharding-column=prod_id
spring.shardingsphere.sharding.tables.t_product_base.table-strategy.inline.algorithm-expression=t_product_base_$->{prod_id%2}
spring.shardingsphere.sharding.tables.t_product_detail.table-strategy.inline.sharding-column=prod_id
spring.shardingsphere.sharding.tables.t_product_detail.table-strategy.inline.algorithm-expression=t_product_detail_$->{prod_id%2}

#   分布式唯一主键字段
spring.shardingsphere.sharding.tables.t_product_base.key-generator.column=prod_id
#   分布式唯一主键生成方案
spring.shardingsphere.sharding.tables.t_product_base.key-generator.type=SNOWFLAKE
#   分布式唯一主键字段
spring.shardingsphere.sharding.tables.t_product_detail.key-generator.column=id
#   分布式唯一主键生成方案
spring.shardingsphere.sharding.tables.t_product_detail.key-generator.type=SNOWFLAKE

#   绑定表
spring.shardingsphere.sharding.binding-tables[0]=t_product_base,t_product_detail
#   广播表
spring.shardingsphere.sharding.broadcast-tables=t_dict

#   开启SQL日志解析
spring.shardingsphere.props.sql.show=true